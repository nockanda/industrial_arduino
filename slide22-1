#include <ESP8266WiFi.h>
#include <SoftwareSerial.h>
#include "CRC16.h" //CRC라이브러리
#include "CRC.h" //CRC라이브러리

SoftwareSerial faduino(D3,D4);

//사물인터넷보드가 무선공유기에 연결되어야한다!
//무선공유기 ID PW
#ifndef STASSID
#define STASSID "nockanda"
#define STAPSK  "11213144"
#endif

const char* ssid = STASSID;
const char* password = STAPSK;

//IoT보드가 서버역할을 하겠다!(1~65536)
WiFiServer server(60000); //서버를 60000번 포트에 열겠다!

byte tcp_header[6];
byte buff[50];
byte res[50];

//셋업함수 -> 무선공유기하고 연결하는 작업!
void setup() {
  Serial.begin(115200); //PC-IoT보드간 통신(결과를 PC에 출력하기 위한)
  faduino.begin(9600);
  
  IPAddress ip (192, 168, 0, 100);
  IPAddress gateway (192, 168, 0, 1);
  IPAddress subnet (255, 255, 255, 0); 
  WiFi.config (ip, gateway, subnet);

  Serial.println();
  Serial.println();
  Serial.print(F("Connecting to "));
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(F("."));
  }
  Serial.println();
  Serial.println(F("WiFi connected"));

  // Start the server
  server.begin();
  Serial.println(F("Server started"));

  // Print the IP address
  Serial.println(WiFi.localIP());
}

void loop() {
  //1:1통신만 가능하다!
  //서버가 클라이언트의 접속을 기다리는것을 listen한다라고 표현한다!
  WiFiClient client = server.available();
  //클라이언트가 접속한 상태가 아니라면 = 소켓이 생성된 상태가 아니라면~
  if (!client) {
    return;
  }
  Serial.println("새로운 클라이언트의 등장!");

  //지금 접속한 클라이언트가 접속이 유효하다면~
  //클라이언트와 접속이 해제되면 loop는 종료된다!
  while(client.connected()){
    if(client.available()){
      client.readBytes(tcp_header,6); //6byte읽기!
      uint16_t len = tcp_header[4]*256+tcp_header[5];
      client.readBytes(buff,len);
      byte fc = buff[1];

      //CRC계산하기!
      uint16_t req_crc = crc16(buff, len, 0x8005, 0xFFFF, 0, true, true);
      byte req_crc_high = req_crc/256;
      byte req_crc_low = req_crc%256;
      //buff안에 있는 내용을 len개만큼 산업용 아두이노로 전송한다!(modbus rtu request)
      faduino.write(buff,len);
      faduino.write(req_crc_low);
      faduino.write(req_crc_high);

      Serial.print("req=");
      for(int i = 0;i<len;i++){
        Serial.print(buff[i],HEX);
        Serial.print(",");
      }
      Serial.println();

      //산업용 아두이노가 응답을 보낼때까지 대기
      unsigned long timeout_t = millis();
      bool is_timeout = false;
      while(true){
        if(faduino.available()){
          break;
        }
        if(millis() - timeout_t > 500){
          is_timeout = true;
          break;
        }
      }
      if(!is_timeout){
        //응답데이터가 수신 대기중인 상태
        //산업용 아두이노가 응답을 한다! 응답 데이터의 길이가 몇인가?
        if(fc == 5){
          //write single coil
          //8개 읽어들이면 OK
          faduino.readBytes(buff,8);
          //TCP쪽으로 응답!
          for(int i = 0;i<6;i++){
            res[i] = tcp_header[i];  
          }
          for(int i = 0;i<6;i++){
            res[6+i] = buff[i];  
          }
          
          client.write(res,12);
        }else if(fc == 15){
          //write multiple coils
          //8개 읽어들이면 OK
          faduino.readBytes(buff,8);
          //TCP쪽으로 응답!
          for(int i = 0;i<6;i++){
            res[i] = tcp_header[i];  
          }
          for(int i = 0;i<6;i++){
            res[6+i] = buff[i];  
          }
          
          client.write(res,12);
        }else if(fc == 1){
          //read coils
          //3개읽기
          faduino.readBytes(buff,3);
          byte cnt = buff[2];
          byte recv[cnt+2];
          faduino.readBytes(recv,cnt+2);
          
          for(int i = 0;i<cnt+2;i++){
            buff[3+i] = recv[i];
          }
          //TCP쪽으로 응답!
          uint16_t res_len = 3+cnt;
          
          for(int i = 0;i<4;i++){
            res[i] = tcp_header[i];  
          }
          res[4] = res_len / 256;
          res[5] = res_len % 256;
          for(int i = 0;i<res_len;i++){
            res[6+i] = buff[i];  
          }
          for(int i = 0;i<6+res_len;i++){
            Serial.print(res[i],HEX);
            Serial.print(",");
          }
          Serial.println();
          client.write(res,6+res_len);
          
        }else if(fc == 3){
          //read holding register
          faduino.readBytes(buff,3);
          byte cnt = buff[2];
          byte recv[cnt+2];
          faduino.readBytes(recv,cnt+2);
          //TCP쪽으로 응답!
          uint16_t res_len = 3+cnt; //5
          
          for(int i = 0;i<4;i++){
            res[i] = tcp_header[i];  
          }
          res[4] = res_len / 256;
          res[5] = res_len % 256;
          for(int i = 0;i<3;i++){
            res[6+i] = buff[i];  
          }
          for(int i = 0;i<cnt;i++){
            res[3+6+i] = recv[i];  
          }
          client.write(res,6+res_len);
        }else if(fc == 6){
          faduino.readBytes(buff,8);
          //TCP쪽으로 응답!
          for(int i = 0;i<6;i++){
            res[i] = tcp_header[i];  
          }
          for(int i = 0;i<6;i++){
            res[6+i] = buff[i];  
          }
          client.write(res,12);
        }else if(fc == 4){
          //read input register
          faduino.readBytes(buff,3);
          byte cnt = buff[2];
          byte recv[cnt+2];
          faduino.readBytes(recv,cnt+2);
          //TCP쪽으로 응답!
          uint16_t res_len = 3+cnt; //5
          
          for(int i = 0;i<4;i++){
            res[i] = tcp_header[i];  
          }
          res[4] = res_len / 256;
          res[5] = res_len % 256;
          for(int i = 0;i<3;i++){
            res[6+i] = buff[i];  
          }
          for(int i = 0;i<cnt;i++){
            res[3+6+i] = recv[i];  
          }
          client.write(res,6+res_len);
        }else if(fc == 16){
          //write multiple register
          faduino.readBytes(buff,8);
          //TCP쪽으로 응답!
          for(int i = 0;i<6;i++){
            res[i] = tcp_header[i];  
          }
          for(int i = 0;i<6;i++){
            res[6+i] = buff[i];  
          }
          
          client.write(res,12);
        }
      }
      
      /*
      Serial.print("이것은 TCP헤더입니다=");
      for(int i = 0;i<6;i++){
        Serial.print(tcp_header[i],HEX);
        Serial.print(",");
      }
      Serial.println();
      Serial.print("이것은 모드버스 RTU 입니다=");
      for(int i = 0;i<len;i++){
        Serial.print(buff[i],HEX);
        Serial.print(",");
      }
      Serial.println();
      */
    }
  }

  Serial.println("클라이언트와 접속이 끊어졌다!");
  
}

