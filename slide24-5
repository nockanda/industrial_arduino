#include <SimpleModbusRtu_mega2560_2.h>//라이브러리 사용하겠다!
#include <MsTimer2.h>

//산업용 아두이노에서 메모리를 초과하지 않는 선에서 내가 원하는 만큼 메모리를 할당하면된다!
//unisgned int
uint16_t au16data[16]; //레지스터 주소가(0~15)
//byte
//8bit짜리 자료형이 10개배열로 있으므로 80개의 주소가 있다!
uint8_t au8data[10]; //코일 (0~79)

int task_count = 0;
uint16_t mydelay[5];
void task(){
  if(read_coil(au8data,29)){
    mydelay[0] = 0 + 2*read_uint16_reg(au16data,1);
    mydelay[1] = mydelay[0] + 2*read_uint16_reg(au16data,2);
    mydelay[2] = mydelay[1] + 2*read_uint16_reg(au16data,3);
    mydelay[3] = mydelay[2] + 2*read_uint16_reg(au16data,4);
    mydelay[4] = mydelay[3] + 2*read_uint16_reg(au16data,5);
    if(task_count == 0){
      write_coil(au8data,0,LOW);
      write_coil(au8data,1,HIGH);
      write_coil(au8data,2,LOW);
      write_uint16_reg(au16data,0,0);
    }else if(task_count == mydelay[0]){
      write_coil(au8data,0,LOW);
      write_coil(au8data,1,HIGH);
      write_coil(au8data,2,LOW);
      write_uint16_reg(au16data,0,1);
    }else if(task_count == mydelay[1]){
      write_coil(au8data,0,LOW);
      write_coil(au8data,1,HIGH);
      write_coil(au8data,2,LOW);
      write_uint16_reg(au16data,0,2);
    }else if(task_count == mydelay[2]){
      write_coil(au8data,0,LOW);
      write_coil(au8data,1,HIGH);
      write_coil(au8data,2,LOW);
      write_uint16_reg(au16data,0,3);
    }else if(task_count == mydelay[3]){
      write_coil(au8data,0,LOW);
      write_coil(au8data,1,LOW);
      write_coil(au8data,2,HIGH);
      write_uint16_reg(au16data,0,4);
    }else if(task_count == mydelay[4]){
      task_count = -1;
    }
    task_count++;
  }else{
    write_coil(au8data,0,HIGH);
    write_coil(au8data,1,LOW);
    write_coil(au8data,2,LOW);
    task_count = 0;
  }
}

union{
  uint16_t t[2];
  float f;
}myfloat;
void write_coil(uint8_t * data,uint16_t addr,bool value){
  uint8_t array_num = addr / 8;
  uint8_t array_index = addr % 8;
  bitWrite(data[array_num], array_index, value);
}
bool read_coil(uint8_t * data,uint16_t addr){
  uint8_t array_num = addr / 8;
  uint8_t array_index = addr % 8;
  return bitRead(data[array_num], array_index);
}
void write_uint16_reg(uint16_t * data,uint16_t addr,uint16_t value){
  data[addr] = value;
}
uint16_t read_uint16_reg(uint16_t * data,uint16_t addr){
  return data[addr];
}
void write_int16_reg(uint16_t * data,uint16_t addr,int16_t value){
  data[addr] = value;
}  
int16_t read_int16_reg(uint16_t * data,int16_t addr){
  return data[addr];
}  
void write_uint32_reg(uint16_t * data,uint16_t addr,uint32_t value){
  data[addr] = value >> 16;
  data[addr+1] = value & 0xFFFF;
}
uint32_t read_uint32_reg(uint16_t * data,uint16_t addr){
  uint32_t output = 0;
  output = data[addr];
  output = output << 16;
  output = output | data[addr+1];
  return output;
}

void write_int32_reg(uint16_t * data,uint16_t addr,int32_t value){
  data[addr] = value >> 16;
  data[addr+1] = value & 0xFFFF;
}
int32_t read_int32_reg(uint16_t * data,uint16_t addr){
  int32_t output = 0;
  output = data[addr];
  output = output << 16;
  output = output | data[addr+1];
  return output;
}
void write_float_reg(uint16_t * data,uint16_t addr,float value){
  myfloat.f = value;
  data[addr] = myfloat.t[0];
  data[addr+1]= myfloat.t[1];
}

float read_float_reg(uint16_t * data,uint16_t addr){
  myfloat.t[0] = data[addr];
  myfloat.t[1] = data[addr+1];
  return myfloat.f;
}

void setup() {
  Serial.begin(9600);
  //모든 출력포트를 출력으로 설정하겠다!
  for(int i=38; i<=51; i++){
    pinMode(i, OUTPUT);
  }
  //모든 입력포트를 입력으로 설정하겠다!
  for(int i=22; i<=37; i++){
    pinMode(i, INPUT);
  }
   usart3init(9600); //RS232포트중 채널1번에 모드버스 프로토콜을 사용한다!
   //내가 희망하는 슬레이브주소(1), 레지스터(0~15), 코일(0~79)
   startSimpleModbus(1,au16data, au8data);
   MsTimer2::set(500, task); // 500ms period
   MsTimer2::start();
   write_uint16_reg(au16data,1,2);
   write_uint16_reg(au16data,2,2);
   write_uint16_reg(au16data,3,2);
   write_uint16_reg(au16data,4,2);
   write_uint16_reg(au16data,5,2);
}
void loop() {
  //write coil은 0~13
  //출력포트가 14개이기 때문에 반복문이 14회 회전한다!
  for(byte n=0; n<8; n++){
    //38~45번핀까지의 디지털 상태를 설정한다!
    digitalWrite(38+n, bitRead(au8data[0], n));
  }
  for(byte n=0; n<6; n++){
    //46~51번핀까지의 디지털 상태를 설정한다! ..14와 15은 아직 할당 안됨!
    digitalWrite(38+8+n, bitRead(au8data[1], n));
  }

  //read coil은 16~31범위의 주소를 가진다!
  //입력포트가 16개이기 때문에 반복문이 16회 회전한다!
  for(byte n=0; n<8; n++){
    //22~29
    bitWrite( au8data[2],n, digitalRead(n+22) ) ;
  }
  for(byte n=0; n<8; n++){
    //30~37
    bitWrite( au8data[3],n, digitalRead(n+8+22) ) ;
  }
  //////////////////////////////////////
}



