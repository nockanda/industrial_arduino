//산업용 아두이노와 모드버스 RTU하기!
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include "nockanda.h"

const char* ssid = "nockanda"; //공유기 id
const char* password = "11213144"; //공유기 pw
const char* mqtt_server = "broker.mqtt-dashboard.com"; //외국에서 공짜로 제공하는 서버

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

//RX를 D3에 연결, Tx를 D4
SoftwareSerial max3232(D3,D4);
Nockanda_modbus nm(&max3232);

unsigned long main_t = 0;
bool sw = false;

void write_single_coil(byte id,uint16_t addr,uint16_t data){
  Serial.print("write single coil 완료함");
  String res = String(id)+",5," + String(addr) + "," + String(data);
  client.publish("nockanda/output", res.c_str());
}
void write_multiple_coils(byte id,uint16_t addr,uint16_t cnt){
  Serial.print("write multiple coils 완료함");
  String res = String(id)+",15," + String(addr) + "," + String(cnt);
  client.publish("nockanda/output", res.c_str());
}
void write_single_register(byte id,uint16_t addr, uint16_t data){
  Serial.print("write_single_register 완료함");
  String res = String(id)+",6," + String(addr) + "," + String(data);
  client.publish("nockanda/output", res.c_str());
}
void read_coils(byte id,uint16_t addr,uint16_t cnt,uint16_t num, byte * data){
  Serial.print("read_coils 완료함");
  //cnt가 8이하라면 data[3]에 8bit로 coil정보가 있음
  //cnt가 16이하라면 data[3]과 data[4]에 16bit로 coil정보가 있음
  //16보다 큰 경우는 현재 고려하지 않음
  if(cnt > 8){
    String res = String(id)+",1," + String(addr) + "," + String(cnt)+ "," + String(num)+ "," + String(data[3]) + "," +String(data[4]);
    client.publish("nockanda/output", res.c_str());
  }else{
    String res = String(id)+",1," + String(addr) + "," + String(cnt)+ "," + String(num)+ "," + String(data[3]);;
    client.publish("nockanda/output", res.c_str());
  }
}
void read_holding_register(byte id, byte * data,uint16_t offset,uint16_t len,uint16_t num){
  Serial.print("read_holding_register 완료함");
  
  String res = String(id)+",3," + String(num) + ",";
  for(int i = offset;i < (offset+len)-1;i++){
    res += String(data[i]) + ",";
  }
  res += String(data[offset+len-1]);
  client.publish("nockanda/output", res.c_str());
}
void read_input_register(byte id, byte * data,uint16_t offset,uint16_t len,uint16_t num){
  Serial.print("read_input_register 완료함");
  
}

//인터넷 공유기와 접속하겠다!
void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

//iot보드에 수신된 mqtt데이터가 처리되는 부분!
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  Serial.println(payload[1]);
  //0  1  2  3  4  5
  //01 05 00 00 FF 00
  //산업용 아두이노에게 request
  //payload[1] // FC
  if(payload[1] == 5){
    //write single coil
    byte slave_id = payload[0];
    uint16_t addr = payload[2] * 256 + payload[3];
    uint16_t data = payload[4] * 256 + payload[5];
    nm.nockanda_write_single_coil_queue(slave_id,addr, data);
  }else if(payload[1] == 1){
    //read coils
    byte slave_id = payload[0];
    uint16_t addr = payload[2] * 256 + payload[3];
    uint16_t cnt = payload[4] * 256 + payload[5];
    uint16_t num = payload[6] * 256 + payload[7];
    nm.nockanda_read_coils_queue(slave_id ,addr,cnt,num);
  }else if(payload[1] == 3){
    //read hoding register
    byte slave_id = payload[0];
    uint16_t addr = payload[2] * 256 + payload[3];
    uint16_t cnt = payload[4] * 256 + payload[5];
    uint16_t num = payload[6] * 256 + payload[7];
    nm.nockanda_read_hoding_register_queue(slave_id,addr,cnt,num);
  }else if(payload[1] == 15){
    //write multiple coils
    byte slave_id = payload[0];
    uint16_t addr = payload[2] * 256 + payload[3];
    uint16_t cnt = payload[4] * 256 + payload[5];
    uint16_t data = payload[6] * 256 + payload[7];
    nm.nockanda_write_multiple_coils_queue(slave_id,addr,cnt,data);
  }else if(payload[1] == 6){
    //write single register
    byte slave_id = payload[0];
    uint16_t addr = payload[2] * 256 + payload[3];
    uint16_t data = payload[4] * 256 + payload[5];
    nm.nockanda_write_single_register_queue(slave_id,addr,data);
  }else if(payload[1] == 4){
    //read input register
  }
}

//reconnect함수안에서 구독등록을 한다!
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("nockanda/input");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(9600);
  nm.begin(9600);//산업용 아두이노와 모드버스 RTU!
  nm.write_single_coil_cb = write_single_coil;
  nm.read_holding_register_cb = read_holding_register;
  nm.read_input_register_cb = read_input_register;
  nm.read_coils_cb = read_coils;
  nm.write_multiple_coils_cb = write_multiple_coils;
  nm.write_single_register_cb=write_single_register;
  setup_wifi();
  client.setServer(mqtt_server, 1883); //서버정보
  client.setCallback(callback); //수신부처리
}

void loop() {
  //아래 4줄은 반드시 있어야 하는 부분
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  nm.loop(); //녹칸다의 모드버스 기능을 동작시키는 부분
  /*
  unsigned long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    ++value;
    snprintf (msg, MSG_BUFFER_SIZE, "hello world #%ld", value);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("nockanda/output", msg);
  }
  */
}

